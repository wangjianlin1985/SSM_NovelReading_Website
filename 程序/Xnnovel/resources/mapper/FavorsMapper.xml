<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xnnovel.xy.dao.FavorsMapper">
  <resultMap id="BaseResultMap" type="com.xnnovel.xy.vo.FavorsVo">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="novel_id" jdbcType="INTEGER" property="novelId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <association property="novel" select="com.xnnovel.xy.dao.NovelMapper.selectByPrimaryKey" column="novel_id"
                 javaType="com.xnnovel.xy.entity.Novel"></association>
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, novel_id, date_format(create_time, '%Y-%c-%d %H:%i:%s' ) as createTime
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from xn_favors
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from xn_favors
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xnnovel.xy.entity.Favors">
    insert into xn_favors (id, user_id, novel_id, 
      create_time)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{novelId,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.xnnovel.xy.entity.Favors">
    insert into xn_favors
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="novelId != null">
        novel_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="novelId != null">
        #{novelId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xnnovel.xy.entity.Favors">
    update xn_favors
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="novelId != null">
        novel_id = #{novelId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xnnovel.xy.entity.Favors">
    update xn_favors
    set user_id = #{userId,jdbcType=INTEGER},
      novel_id = #{novelId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="queryList" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from xn_favors
    <where>
      <if test='userId != null and userId!=""'>
        and user_id=#{userId}
      </if>
      <if test='novelId != null and novelId!=""'>
        and novel_id=#{novelId}
      </if>
    </where>
    order by create_time desc
    <if test="start != null and limit != null">
      limit #{start}, #{limit}
    </if>
  </select>


  <select id="queryTotal" resultType="java.lang.Integer">

    select count(*) from xn_favors
    <where>
      <if test='userId != null and userId!=""'>
        and user_id=#{userId}
      </if>
      <if test='novelId != null and novelId!=""'>
        and novel_id=#{novelId}
      </if>
    </where>
  </select>
</mapper>